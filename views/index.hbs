<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Verifikasi</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@9"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
        integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous" />
    <style>
        button,
        video {
            display: block;
            margin: 0 auto;
            clip-path: inset(10% 10% 10% 10% round 20%, 20%);

            /* OLD VALUE example: circle(245px, 140px, 50px); */
            /* Yep, even the new clip-path has deprecated stuff. */
        }

        #capture {
            display: none;

        }

        #snapshot {
            display:none;
            width: 400px;
            height: 300px;
        }
    </style>
</head>

<body>
    <!-- Video Element & Canvas -->
    <div class="container">
        <div class="">
            <h3 class="text-center">Capture your picture</h3>
            <div class="d-flex">
                <video id="stream" width="400" height="300"></video>

                <div id="snapshot"></div>
                <canvas id="capture" width="400" height="300"></canvas>
            </div>
            <div class="d-flex d-block justify-content-center mt-4">
                <button id="btn-capture" type="button" class="btn btn-primary mx-auto">Capture</button>
            </div>
        </div>
        <div>
            <h3 id="responseResults" class="text-center mt-3"></h3>
        </div>
    </div>
    <script>
        const btnCapture = document.getElementById("btn-capture");

        const stream = document.getElementById("stream");
        const capture = document.getElementById("capture");
        const snapshot = document.getElementById("snapshot");
        var cameraStream = null;

        startStreaming();

        function startStreaming() {
            let mediaSupport = 'mediaDevices' in navigator;
            if (mediaSupport && null == cameraStream) {
                navigator.mediaDevices.getUserMedia({
                        video: true
                    })
                    .then(function (mediaStream) {
                        cameraStream = mediaStream;
                        stream.srcObject = mediaStream;
                        stream.play();
                    })
                    .catch(function (err) {
                        console.log("Unable to access camera: " + err);
                    });
            } else {
                alert('Your browser does not support media devices.');
                return;
            }
        }

        btnCapture.addEventListener("click", captureSnapshot);

        function captureSnapshot() {
            if (null != cameraStream) {
                let ctx = capture.getContext('2d');
                let img = new Image();
                ctx.drawImage(stream, 0, 0, capture.width, capture.height);
                img.src = capture.toDataURL("image/png");
                snapshot.innerHTML = '';
                snapshot.appendChild(img);
                stream.style.display="none"
                snapshot.style.display="block"
                snapshot.style.margin="0 auto"

                let request = new XMLHttpRequest();
                request.open("POST", "/verify", true);
                let data = new FormData();
                let dataURI = snapshot.firstChild.getAttribute("src");
                let imageData = dataURItoBlob(dataURI);
                data.append("img", imageData, "myimage.png");
                request.send(data);
                setTimeout(() => {
                    request.onreadystatechange = (e) => {
                        if (request.readyState !== 4) {
                            return;
                        }

                        if (request.status === 200) {
                            let jsonResponse = JSON.parse(request.responseText)
                            document.querySelector('#responseResults').innerHTML = jsonResponse[0].msg
                            document.querySelector('#responseResults').style.color = jsonResponse[0].hexa
                        }
                    }
                }, 3000);

            }
        }

        function stopStreaming() {

            if (null != cameraStream) {
                let track = cameraStream.getTracks()[0];
                track.stop();
                stream.load();
                cameraStream = null;
            }
        }

        function dataURItoBlob(dataURI) {
            var byteString = atob(dataURI.split(',')[1]);
            var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
            var buffer = new ArrayBuffer(byteString.length);
            var data = new DataView(buffer);

            for (var i = 0; i < byteString.length; i++) {
                data.setUint8(i, byteString.charCodeAt(i));
            }
            return new Blob([buffer], {
                type: mimeString
            });
        }
    </script>
</body>

</html>